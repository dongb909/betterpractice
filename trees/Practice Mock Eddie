class Adopt {
  constructor () {
    this.dogQueue=[];
    this.catQueue=[];
  }
  
  enqueue(animal){
    this.queue.push(animal);
    this.count+=1
  }
  
  dequeue(){
    this.queue.shift();
  }
  
}

class Animal {
  constructor(type, timestamp) {
    this.type = type;
    this.timestamp = timestamp;
  }
}

const doggy = new Animal('dog', 2);
const adoptionClinic = new Adopt();

adoptionClinic.enqueue(doggy);













function reverseString(str) {
  return str.split('').reverse().join('');
}

function isPalindrome(str){
  return str === reverseString(str)
}

// input: ababababa
//output: array of every unique palindrome
//ex: a, b, aba, ababa, bab etc

function uniquePalindromes(str){
  let unique = new Set();
  
  for (let i = 0; i< str.length; i++){
    for(let j = 0; j< str.length; j++){
      let forward = str.slice(i,j);
      if (forward === reverseString(forward) /*&& !unique.has(forward)*/){   //redundant, don't need to check for set
        unique.add(forward)
      }
    }
  }
  
  return new Array.from(unique);   copies over from set
  return [...unique]
  
  
  
}







function reverseString(str) {
  return str.split('').reverse().join('');
}

function isPalindrome(str){
  return str === reverseString(str)
}

// input: ababababa
//output: array of every unique palindrome
//ex: a, b, aba, ababa, bab etc

function uniquePalindromes(str){
  // let result = [];
  let unique = new Set();
  
  for (let i = 0; i< str.length; i++){
    for(let j = 0; j< str.length; j++){
      let forward = str.slice(i,j);
      if (forward === reverseString(forward) && !unique.has(forward)){
        unique.add(forward)
      }
    }
  }
  
  return [...unique]
}


// ababa
// abba

function uniquePalin(str) {
  let unique = new Set();
  
  for(let mid=0; mid < str.length; mid++) {
    unique.add(str[mid])
  	unique.add(...isPalindrome(i-1,i+1,str))
    
    if (str[i] === str[i + 1]) {
      const doubleMid = str[i] + str[i+1];
      //left = i - 1; //still bc while loop probably already edited it.
     // right = i + 2;  //don't need to think about left because you're moving left to right anyways
			unique.add(...isPalindrome(i - 1,i + 2,str))
      }	
    }
  }
  return new Array.from(unique)
}


function isPalindrome(left, right, str){
  let unique = new Set();
	while (str[left] && str[right] && str[left]===str[right]){
		unique.add(str.slice(left,right+1));
  	left--;
  	right++;
  }
  return unique
}



AAAAAMMMMAAAAZZZOONNNN
 //stream of qs, identify top 10 questions asked


q1,10
q2,50
q3,4
...
q1000, 100
q3, 50


return top3 questions {q1000, q2, q1}

[{Ques: "", count:#},{}, {}]

//min heap k = 10
//assuming have access to heap, pop, min, push
//yes assume stream length > k
function findTopQs (stream, k) {
    //go through entire stream make heap
    let minHeap = new Heap();
    for (let i = 0, i< stream.length; i++) {
        if (minHeap.size < k) {
            minHeap.push(stream[i]);
        } else if (minHeap.min[count] < stream[i][count]) {
            minHeap.pop();
            minHeap.push(stream[i]);
        } 
    }
    //heap complete, print out top k q
    let result = [];
    while (minHeap.size > 0) {
        result.push(minHeap.pop()[Ques]);
    }
    return result;
}

time: O(n logk) space: heap k , result, k




class Node {
  constructor(name) {
    this.name = name;
    this.children = [];
  }

  addChild(name) {
    this.children.push(new Node(name));
    return this;
  }
  
  breadthFirstSearch() {
      let result = [];
      let queue = [this];
      while (queue.length !== 0){
          let currentNode = queue.shift();
          result.push(currentNode.name)
          //if (currentNode.chidren.length !== 0) {
          //IFS ARE for when you expect something to break if req doens't match, forloop wouldn't even execute if there's an empty array so don't need it. 
             for (const childNode of currentNode.children) {
                 queue.push(childNode)
             }
         // } 
          
       }
       return result;
  }
}

input = A
     /  |  \
    B   C   D
   / \     / \
  E   F   G   H
     / \   \
    I   J   K
    
Output = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K"]



for (const child of currentNode.children) {} arrrr, child == element NOT index number




for (const key in obj)   obbbbbj






//[positive int coins], n target sum of money
// return number of ways to make change for that target using the g


//input: [1, 5, 10, 25] , 6
//output: 2 // 1x1 + 1x5 && 6x1
//
//sorted? yes. 






class Tree {
    constructor(name) {
        this.name = name;
        this.ancestor = null;
    }
}

//3 instances of the class, you don't know the children
//1 = root
//2 = 
//3 = 

//return youngest ancestor to the 2 descendants


function yca (root, des1, des2) {
    if (root.name === des1.name && root.name === des2.name) return root;
    
    let desA = new Set(); // A, I, D, B
    desA.add(root.name);
    
    while (des1.name !== root.name) {
        desA.add(des1.name);
        des1 = des1.ancestor;
    }
    
    while (!desA.has(des2.name)) {
        des2 = des2.ancestor;
    }
    
    return des2;
}


topAncestor = Node A
descendantOne = Node I
descendantTwo = Node E

          A
       /     \
      B       C
    /   \   /   \
   D     E F     G
 /   \
H     I

Output: Node B

function getYoungestCommonAncestor(topAncestor, descendantOne, descendantTwo) {
    const detectedAncestorsOne = new Set();
    const detectedAncestorsTwo = new Set();
    let nodeOne = descendantOne;
    let nodeTwo = descendantTwo;
    
    while (nodeOne.ancestor || nodeTwo.ancestor) {
        detectedAncestorsOne.add(nodeOne.name);
        detectedAncestorsTwo.add(nodeTwo.name);
        
        if (detectedAncestorsTwo.has(nodeOne.name)) {
            return nodeOne;
        }
        
        if (detectedAncestorsOne.has(nodeTwo.name)) {
            return nodeTwo;
        }
        
        if (nodeOne.ancestor) {
            nodeOne = nodeOne.ancestor;
        }
        
        if (nodeTwo.ancestor) {
            nodeTwo = nodeTwo.ancestor;
        }
    }
    
    return topAncestor;











function closestVal(bstnode, target){
    return compare(bstnode, target, bstnode.val);
}


function compare (node, target, closestVal){
    //if null then return prev node
    if (!node) return closestVal;
    //compare nodes to see if equal 
    if (Math.abs(target - closestVal) > Math.abs(target - node.value)) {
        closestVal = node.value;
    }
    if (target < node.val) {
        return compare(node.left, target, closestVal);
    }
    if (target > node.val) {
        return compare(node.right, target, closestVal);
    }
    return closestVal;
    
}


//return closest val to the target val
//O: return val
//e: can equal, ordered tree, neg, no empty, duplicate values, would target be in tree, no.

class Node = {
    constructor() {
        this.left;
        this.right;
        this.value;
    }
}

         10
       /     \
      5      15
    /   \   /   \
   2     5 13   22
 /           \
1            14

target = 12